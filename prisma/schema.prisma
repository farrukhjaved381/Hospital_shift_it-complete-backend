generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  passwordHash       String
  firstName          String
  lastName           String
  role               Role                @default(STUDENT)
  userType           UserType            @default(NONE)
  affiliationId      String?
  emailVerified      Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  assignments        Assignment[]
  auditLogs          AuditLog[]
  documents          Document[]
  emailVerifications EmailVerification[]
  memberships        Membership[]
  passwordResets     PasswordReset[]     @relation("UserPasswordResets")
  profile            Profile?
  refreshTokens      RefreshToken[]
  generatedReports   Report[]            @relation("ReportGeneratedBy")
  affiliation        Organization?       @relation("UserAffiliation", fields: [affiliationId], references: [id])
  verifications      Verification[]
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  address   String?
  phone     String?
  dob       DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id                   String            @id @default(cuid())
  name                 String
  type                 OrganizationType
  createdAt            DateTime          @default(now())
  billingAccounts      BillingAccount[]  @relation("OrgBillingAccounts")
  calendars            Calendar[]        @relation("OrgCalendars")
  clinicalSites        ClinicalSite[]    @relation("OrgClinicalSites")
  schoolInvoices       Invoice[]         @relation("OrgInvoiceSchool")
  memberships          Membership[]
  rotations            Rotation[]        @relation("OrgRotationHospital")
  reqHospitalRequests  RotationRequest[] @relation("ReqHospital")
  reqSchoolRequests    RotationRequest[] @relation("ReqSchool")
  usersWithAffiliation User[]            @relation("UserAffiliation")
}

model Membership {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  role           Role
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  tokenHash  String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  replacedBy String?
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Invite {
  id           String   @id @default(cuid())
  inviteeEmail String
  orgId        String?
  roleToCreate Role?
  invitedBy    String
  token        String
  used         Boolean  @default(false)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation("UserPasswordResets", fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  meta      Json?
  createdAt DateTime @default(now())
  actor     User     @relation(fields: [actorId], references: [id])
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ClinicalSite {
  id          String            @id @default(cuid())
  hospitalId  String
  name        String
  address     String?
  capacity    Int?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  hospital    Organization      @relation("OrgClinicalSites", fields: [hospitalId], references: [id], onDelete: Cascade)
  departments Department[]
  rotations   Rotation[]
  requests    RotationRequest[]
}

model Department {
  id        String            @id @default(cuid())
  siteId    String
  name      String
  site      ClinicalSite      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  rotations Rotation[]
  requests  RotationRequest[]
}

model RotationRequest {
  id            String        @id @default(cuid())
  schoolId      String
  hospitalId    String
  siteId        String?
  departmentId  String?
  specialty     String
  startDate     DateTime
  endDate       DateTime
  shift         ShiftType
  hoursPerShift Int
  studentRoster String[]
  status        RequestStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  rotation      Rotation?     @relation("ReqToRotation")
  department    Department?   @relation(fields: [departmentId], references: [id])
  hospital      Organization  @relation("ReqHospital", fields: [hospitalId], references: [id])
  school        Organization  @relation("ReqSchool", fields: [schoolId], references: [id])
  site          ClinicalSite? @relation(fields: [siteId], references: [id])

  @@index([schoolId])
  @@index([hospitalId])
  @@index([siteId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("RotationRequest")
}

model Rotation {
  id           String           @id @default(cuid())
  requestId    String?          @unique
  hospitalId   String
  siteId       String?
  departmentId String?
  specialty    String
  startDate    DateTime
  endDate      DateTime
  capacity     Int
  status       RotationStatus   @default(SCHEDULED)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  assignments  Assignment[]
  department   Department?      @relation(fields: [departmentId], references: [id])
  hospital     Organization     @relation("OrgRotationHospital", fields: [hospitalId], references: [id])
  request      RotationRequest? @relation("ReqToRotation", fields: [requestId], references: [id])
  site         ClinicalSite?    @relation(fields: [siteId], references: [id])

  @@index([hospitalId])
  @@index([siteId])
  @@index([status])
  @@index([startDate, endDate])
}

model Assignment {
  id         String   @id @default(cuid())
  rotationId String
  studentId  String
  status     String   @default("ASSIGNED")
  createdAt  DateTime @default(now())
  rotation   Rotation @relation(fields: [rotationId], references: [id], onDelete: Cascade)
  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([rotationId, studentId])
}

model Calendar {
  id     String          @id @default(cuid())
  orgId  String
  owner  Organization    @relation("OrgCalendars", fields: [orgId], references: [id], onDelete: Cascade)
  events CalendarEvent[]
}

model CalendarEvent {
  id         String            @id @default(cuid())
  calendarId String
  title      String
  type       CalendarEventType @default(OTHER)
  start      DateTime
  end        DateTime
  meta       Json?
  calendar   Calendar          @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([calendarId, start, end])
}

model Document {
  id           String           @id @default(cuid())
  userId       String
  name         String
  url          String
  type         VerificationType
  status       Status           @default(PENDING)
  expiresAt    DateTime?
  uploadedAt   DateTime?        @default(now())
  meta         Json?
  user         User             @relation(fields: [userId], references: [id])
  verification Verification?

  @@index([userId])
  @@index([status])
}

model Verification {
  id          String           @id @default(cuid())
  userId      String
  type        VerificationType
  status      Status           @default(PENDING)
  cost        Float?
  partnerRef  String?
  partnerMeta Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  documentId  String?          @unique
  invoiceId   String?
  document    Document?        @relation(fields: [documentId], references: [id])
  invoice     Invoice?         @relation("InvoiceVerifications", fields: [invoiceId], references: [id])
  user        User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([partnerRef])
}

model Invoice {
  id                    String         @id @default(cuid())
  invoiceNumber         String?        @unique
  schoolId              String
  status                InvoiceStatus  @default(DRAFT)
  subtotal              Float          @default(0)
  tax                   Float          @default(0)
  total                 Float          @default(0)
  currency              String         @default("USD")
  dueDate               DateTime?
  issuedAt              DateTime?
  paidAt                DateTime?
  stripeInvoiceId       String?
  stripePaymentIntentId String?
  notes                 String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  school                Organization   @relation("OrgInvoiceSchool", fields: [schoolId], references: [id])
  items                 InvoiceItem[]
  payments              Payment[]
  verifications         Verification[] @relation("InvoiceVerifications")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  type        ItemType
  description String
  quantity    Int      @default(1)
  unitAmount  Float
  total       Float
  meta        Json?
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
}

model Payment {
  id             String        @id @default(cuid())
  invoiceId      String
  amount         Float
  currency       String        @default("USD")
  method         PaymentMethod
  stripeChargeId String?
  status         PaymentStatus @default(PENDING)
  receivedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  invoice        Invoice       @relation(fields: [invoiceId], references: [id])
}

model BillingAccount {
  id             String       @id @default(cuid())
  orgId          String
  billingEmail   String
  billingAddress Json?
  org            Organization @relation("OrgBillingAccounts", fields: [orgId], references: [id])

  @@index([orgId])
}

model Report {
  id              String       @id @default(cuid())
  type            ReportType
  params          Json
  status          ReportStatus @default(PENDING)
  resultUrl       String?
  generatedBy     String?
  generatedAt     DateTime?
  createdAt       DateTime     @default(now())
  generatedByUser User?        @relation("ReportGeneratedBy", fields: [generatedBy], references: [id])
}

enum Role {
  SUPER_ADMIN
  HOSPITAL_ADMIN
  SCHOOL_ADMIN
  STUDENT
}

enum OrganizationType {
  HOSPITAL
  SCHOOL
}

enum AffiliationType {
  NONE
  HOSPITAL
  SCHOOL
}

enum UserType {
  NONE
  STUDENT
  HOSPITAL_USER
  SCHOOL_USER
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
  CANCELED
}

enum RotationStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELED
}

enum ShiftType {
  AM
  PM
}

enum CalendarEventType {
  BLOCKED
  ROTATION
  OTHER
}

enum VerificationType {
  DOCUMENT
  DRUG_TEST
  BACKGROUND_CHECK
}

enum Status {
  PENDING
  APPROVED
  DENIED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PENDING_PAYMENT
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum ItemType {
  VERIFICATION
  DRUG_TEST
  BACKGROUND_CHECK
  OTHER
}

enum PaymentMethod {
  STRIPE_CARD
  BANK_TRANSFER
  MANUAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ReportType {
  PLACEMENTS_OVERVIEW
  COMPLIANCE_SUMMARY
  BILLING_SUMMARY
  UTILIZATION
  ROTATION_DETAIL
  VERIFICATION_DETAIL
}

enum ReportStatus {
  PENDING
  RUNNING
  READY
  FAILED
}
