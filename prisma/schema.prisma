// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for User Roles within an organization
enum Role {
  SUPER_ADMIN // Can create hospitals/schools, approve onboarding requests, global analytics
  HOSPITAL_ADMIN // Manages a hospital, invites hospital members, sets up departments/sites/shifts, verifies documents
  SCHOOL_ADMIN // Manages a school, enrolls students, proposes rotations
  STUDENT // Can view shifts, upload documents, chat
}

// Enum for Organization Types
enum OrganizationType {
  HOSPITAL
  SCHOOL
}

// New Enum for User Affiliation Type
enum AffiliationType {
  NONE
  HOSPITAL
  SCHOOL
}

// New Enum for User Type
enum UserType {
  NONE // no special affiliation
  STUDENT
  HOSPITAL_USER // regular hospital user (non-admin)
  SCHOOL_USER // regular school user (non-admin)
}

model User {
  id            String        @id @default(cuid()) // Changed to cuid()
  email         String        @unique
  passwordHash  String // Renamed from password to passwordHash
  firstName     String
  lastName      String
  role          Role          @default(STUDENT) // permission-aware role
  userType      UserType      @default(NONE) // descriptive user type / affiliation
  affiliationId String? // optional organization id they belong to (hospital or school)
  affiliation   Organization? @relation("UserAffiliation", fields: [affiliationId], references: [id]) // Added relation name
  emailVerified Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // security/session fields
  refreshTokens      RefreshToken[] // stored hashed refresh tokens (rotation + revocation)
  auditLogs          AuditLog[]
  profile            Profile? // One-to-one relationship with Profile (kept from previous schema)
  memberships        Membership[] // User can be part of multiple organizations (kept from previous schema)
  passwordResets     PasswordReset[]     @relation("UserPasswordResets") // Corrected: Added relation name
  emailVerifications EmailVerification[]
  // Phase 2/3 back-relations
  assignments        Assignment[]
  documents          Document[]
  verifications      Verification[]
  // Reports generated by this user (Phase 5)
  generatedReports   Report[]            @relation("ReportGeneratedBy")
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  address   String?
  phone     String?
  dob       DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Organization {
  id                   String            @id @default(cuid())
  name                 String
  type                 OrganizationType
  createdAt            DateTime          @default(now())
  memberships          Membership[]
  usersWithAffiliation User[]            @relation("UserAffiliation") // Explicitly named relation
  // Scheduling back-relations
  clinicalSites        ClinicalSite[]    @relation("OrgClinicalSites")
  reqSchoolRequests    RotationRequest[] @relation("ReqSchool")
  reqHospitalRequests  RotationRequest[] @relation("ReqHospital")
  rotations            Rotation[]        @relation("OrgRotationHospital")
  calendars            Calendar[]        @relation("OrgCalendars")
  // Billing back-relations
  schoolInvoices       Invoice[]         @relation("OrgInvoiceSchool")
  billingAccounts      BillingAccount[]  @relation("OrgBillingAccounts")
}

model Membership {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  role           Role
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}

// New Model for Refresh Tokens
model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  tokenHash  String // hashed (e.g., argon2 or bcrypt) version of refresh token
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  replacedBy String? // id of token that replaced this (rotation chain)
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

// New Model for Invites
model Invite {
  id           String   @id @default(cuid())
  inviteeEmail String
  orgId        String?
  roleToCreate Role? // e.g., HOSPITAL_ADMIN or SCHOOL_ADMIN
  invitedBy    String // userId of SuperAdmin
  token        String // random invite token (hashed if persisted)
  used         Boolean  @default(false)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

// New Model for Password Resets
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation("UserPasswordResets", fields: [userId], references: [id]) // Added relation name
}

// New Model for Audit Logs
model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  meta      Json?
  createdAt DateTime @default(now())
  actor     User     @relation(fields: [actorId], references: [id])
}

// Email verification tokens per user
model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

// -------- Scheduling & Rotations (Phase 2) --------

// Status enums for requests and rotations
enum RequestStatus {
  PENDING
  APPROVED
  DENIED
  CANCELED
}

enum RotationStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELED
}

enum ShiftType {
  AM
  PM
}

enum CalendarEventType {
  BLOCKED
  ROTATION
  OTHER
}

model ClinicalSite {
  id         String   @id @default(cuid())
  hospitalId String
  name       String
  address    String?
  capacity   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  hospital    Organization      @relation("OrgClinicalSites", fields: [hospitalId], references: [id], onDelete: Cascade)
  departments Department[]
  rotations   Rotation[]
  requests    RotationRequest[]
}

model Department {
  id     String @id @default(cuid())
  siteId String
  name   String

  site      ClinicalSite      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  rotations Rotation[]
  requests  RotationRequest[]
}

model RotationRequest {
  id            String        @id @default(cuid())
  schoolId      String
  hospitalId    String
  siteId        String?
  departmentId  String?
  specialty     String
  startDate     DateTime
  endDate       DateTime
  shift         ShiftType
  hoursPerShift Int
  studentRoster String[]
  status        RequestStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  school     Organization  @relation("ReqSchool", fields: [schoolId], references: [id])
  hospital   Organization  @relation("ReqHospital", fields: [hospitalId], references: [id])
  site       ClinicalSite? @relation(fields: [siteId], references: [id])
  department Department?   @relation(fields: [departmentId], references: [id])
  rotation   Rotation?     @relation("ReqToRotation")

  @@index([schoolId])
  @@index([hospitalId])
  @@index([siteId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("RotationRequest")
}

model Rotation {
  id           String         @id @default(cuid())
  requestId    String?        @unique
  hospitalId   String
  siteId       String?
  departmentId String?
  specialty    String
  startDate    DateTime
  endDate      DateTime
  capacity     Int
  status       RotationStatus @default(SCHEDULED)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  request     RotationRequest? @relation("ReqToRotation", fields: [requestId], references: [id])
  hospital    Organization     @relation("OrgRotationHospital", fields: [hospitalId], references: [id])
  site        ClinicalSite?    @relation(fields: [siteId], references: [id])
  department  Department?      @relation(fields: [departmentId], references: [id])
  assignments Assignment[]

  @@index([hospitalId])
  @@index([siteId])
  @@index([status])
  @@index([startDate, endDate])
}

model Assignment {
  id         String   @id @default(cuid())
  rotationId String
  studentId  String
  status     String   @default("ASSIGNED")
  createdAt  DateTime @default(now())

  rotation Rotation @relation(fields: [rotationId], references: [id], onDelete: Cascade)
  student  User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([rotationId, studentId])
}

model Calendar {
  id     String          @id @default(cuid())
  orgId  String
  events CalendarEvent[]

  owner Organization @relation("OrgCalendars", fields: [orgId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id         String            @id @default(cuid())
  calendarId String
  title      String
  type       CalendarEventType @default(OTHER)
  start      DateTime
  end        DateTime
  meta       Json?

  calendar Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([calendarId, start, end])
}

// -------- Compliance & Verifications (Phase 3) --------

enum VerificationType {
  DOCUMENT
  DRUG_TEST
  BACKGROUND_CHECK
}

enum Status {
  PENDING
  APPROVED
  DENIED
  EXPIRED
}

model Document {
  id           String           @id @default(cuid())
  userId       String
  name         String
  url          String
  type         VerificationType
  status       Status           @default(PENDING)
  expiresAt    DateTime?
  uploadedAt   DateTime?        @default(now())
  meta         Json?
  verification Verification?
  user         User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}

model Verification {
  id          String           @id @default(cuid())
  userId      String
  type        VerificationType
  status      Status           @default(PENDING)
  cost        Float?
  partnerRef  String?
  partnerMeta Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  documentId  String?          @unique
  document    Document?        @relation(fields: [documentId], references: [id])
  invoiceId   String?
  invoice     Invoice?         @relation("InvoiceVerifications", fields: [invoiceId], references: [id])
  user        User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([partnerRef])
}

// -------- Billing & Invoicing (Phase 4) --------

enum InvoiceStatus {
  DRAFT
  SENT
  PENDING_PAYMENT
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum ItemType {
  VERIFICATION
  DRUG_TEST
  BACKGROUND_CHECK
  OTHER
}

enum PaymentMethod {
  STRIPE_CARD
  BANK_TRANSFER
  MANUAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Invoice {
  id                    String        @id @default(cuid())
  invoiceNumber         String?       @unique
  schoolId              String
  status                InvoiceStatus @default(DRAFT)
  subtotal              Float         @default(0)
  tax                   Float         @default(0)
  total                 Float         @default(0)
  currency              String        @default("USD")
  dueDate               DateTime?
  issuedAt              DateTime?
  paidAt                DateTime?
  stripeInvoiceId       String?
  stripePaymentIntentId String?
  notes                 String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  school        Organization   @relation("OrgInvoiceSchool", fields: [schoolId], references: [id])
  items         InvoiceItem[]
  payments      Payment[]
  verifications Verification[] @relation("InvoiceVerifications")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  type        ItemType
  description String
  quantity    Int      @default(1)
  unitAmount  Float
  total       Float
  meta        Json?

  invoice Invoice @relation(fields: [invoiceId], references: [id])
}

model Payment {
  id             String        @id @default(cuid())
  invoiceId      String
  amount         Float
  currency       String        @default("USD")
  method         PaymentMethod
  stripeChargeId String?
  status         PaymentStatus @default(PENDING)
  receivedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  invoice Invoice @relation(fields: [invoiceId], references: [id])
}

model BillingAccount {
  id             String @id @default(cuid())
  orgId          String
  billingEmail   String
  billingAddress Json?

  org Organization @relation("OrgBillingAccounts", fields: [orgId], references: [id])

  @@index([orgId])
}

// -------- Reports & Analytics (Phase 5) --------

enum ReportType {
  PLACEMENTS_OVERVIEW
  COMPLIANCE_SUMMARY
  BILLING_SUMMARY
  UTILIZATION
  ROTATION_DETAIL
  VERIFICATION_DETAIL
}

enum ReportStatus {
  PENDING
  RUNNING
  READY
  FAILED
}

model Report {
  id          String       @id @default(cuid())
  type        ReportType
  params      Json
  status      ReportStatus @default(PENDING)
  resultUrl   String?
  generatedBy String?
  generatedAt DateTime?
  createdAt   DateTime     @default(now())

  generatedByUser User? @relation("ReportGeneratedBy", fields: [generatedBy], references: [id])
}
